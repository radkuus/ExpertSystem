// <auto-generated />
using System;
using ExpertSystem.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpertSystem.EntityFramework.Migrations
{
    [DbContext(typeof(ExpertSystemDbContext))]
    [Migration("20250407153838_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "logic_operator", new[] { "and", "or" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metric", new[] { "accuracy", "f1score", "precision", "recall" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "model_type", new[] { "knn", "linear_regression", "bayes", "neural_network", "own" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "operator", new[] { "greater_than", "greater_than_or_equal", "less_than", "less_than_or_equal" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "plot_type", new[] { "confusion_matrix", "roc" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "set_type", new[] { "training_set", "validation_set", "test_set" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpertSystem.Domain.Models.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DatasetId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.DecisionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RuleId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExperimentID")
                        .HasColumnType("integer");

                    b.Property<int>("LogicOperator")
                        .HasColumnType("logic_operator");

                    b.Property<int>("Metric")
                        .HasColumnType("metric");

                    b.Property<int>("Operator")
                        .HasColumnType("operator");

                    b.Property<double>("Threshold")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentID");

                    b.ToTable("DecisionRules");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Experiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ExperimentId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DatasetID")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DatasetID");

                    b.HasIndex("UserId");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.ModelConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ConfigId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExperimentId")
                        .HasColumnType("integer");

                    b.Property<string>("Hyperparameters")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("ModelType")
                        .HasColumnType("model_type");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.ToTable("ModelConfigurations");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.ModelResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ResultId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<int>("ConfigId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("F1Score")
                        .HasColumnType("integer");

                    b.Property<int>("Precision")
                        .HasColumnType("integer");

                    b.Property<int>("Recall")
                        .HasColumnType("integer");

                    b.Property<int>("SetType")
                        .HasColumnType("set_type");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.ToTable("ModelResults");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Plot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PlotId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlotType")
                        .HasColumnType("plot_type");

                    b.Property<int>("ResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Dataset", b =>
                {
                    b.HasOne("ExpertSystem.Domain.Models.User", "User")
                        .WithMany("Datasets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.DecisionRule", b =>
                {
                    b.HasOne("ExpertSystem.Domain.Models.Experiment", "Experiment")
                        .WithMany("DecisionRules")
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Experiment", b =>
                {
                    b.HasOne("ExpertSystem.Domain.Models.Dataset", "Dataset")
                        .WithMany("Experiments")
                        .HasForeignKey("DatasetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertSystem.Domain.Models.User", "User")
                        .WithMany("Experiments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.ModelConfiguration", b =>
                {
                    b.HasOne("ExpertSystem.Domain.Models.Experiment", "Experiment")
                        .WithMany("ModelConfigurations")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.ModelResult", b =>
                {
                    b.HasOne("ExpertSystem.Domain.Models.ModelConfiguration", "ModelConfiguration")
                        .WithMany("ModelResults")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelConfiguration");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Plot", b =>
                {
                    b.HasOne("ExpertSystem.Domain.Models.ModelResult", "ModelResult")
                        .WithMany("Plots")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelResult");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Dataset", b =>
                {
                    b.Navigation("Experiments");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.Experiment", b =>
                {
                    b.Navigation("DecisionRules");

                    b.Navigation("ModelConfigurations");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.ModelConfiguration", b =>
                {
                    b.Navigation("ModelResults");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.ModelResult", b =>
                {
                    b.Navigation("Plots");
                });

            modelBuilder.Entity("ExpertSystem.Domain.Models.User", b =>
                {
                    b.Navigation("Datasets");

                    b.Navigation("Experiments");
                });
#pragma warning restore 612, 618
        }
    }
}
